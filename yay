<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Pong Game</title>
<style>
  body {
    background: #222;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    color: white;
    font-family: Arial, sans-serif;
    user-select: none;
  }
  canvas {
    background: #000;
    display: block;
    border: 2px solid white;
  }
</style>
</head>
<body>

<canvas id="pong" width="800" height="500"></canvas>

<script>
  const canvas = document.getElementById('pong');
  const ctx = canvas.getContext('2d');

  // Paddle properties
  const paddleWidth = 10;
  const paddleHeight = 100;
  const paddleSpeed = 6;

  // Player paddle (left)
  const player = {
    x: 10,
    y: canvas.height / 2 - paddleHeight / 2,
    width: paddleWidth,
    height: paddleHeight,
    dy: 0,
    score: 0
  };

  // AI paddle (right)
  const ai = {
    x: canvas.width - paddleWidth - 10,
    y: canvas.height / 2 - paddleHeight / 2,
    width: paddleWidth,
    height: paddleHeight,
    dy: 0,
    score: 0,
    speed: 4
  };

  // Ball properties
  const ball = {
    x: canvas.width / 2,
    y: canvas.height / 2,
    radius: 10,
    speed: 5,
    dx: 5,
    dy: 3
  };

  // Draw rectangle function for paddles
  function drawRect(x, y, w, h, color) {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, w, h);
  }

  // Draw circle for ball
  function drawCircle(x, y, r, color) {
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(x, y, r, 0, Math.PI * 2);
    ctx.closePath();
    ctx.fill();
  }

  // Draw text (score)
  function drawText(text, x, y) {
    ctx.fillStyle = 'white';
    ctx.font = '48px Arial';
    ctx.fillText(text, x, y);
  }

  // Reset ball to center
  function resetBall() {
    ball.x = canvas.width / 2;
    ball.y = canvas.height / 2;
    // Reverse direction and randomize speed a bit
    ball.dx = -ball.dx;
    ball.dy = (Math.random() * 6) - 3; // random dy between -3 and 3
  }

  // Move paddles and ball
  function update() {
    // Move player paddle
    player.y += player.dy;

    // Keep player paddle inside canvas
    if (player.y < 0) player.y = 0;
    if (player.y + player.height > canvas.height) player.y = canvas.height - player.height;

    // Simple AI movement to follow the ball
    if (ai.y + ai.height / 2 < ball.y) {
      ai.y += ai.speed;
    } else {
      ai.y -= ai.speed;
    }
    // Keep AI paddle inside canvas
    if (ai.y < 0) ai.y = 0;
    if (ai.y + ai.height > canvas.height) ai.y = canvas.height - ai.height;

    // Move ball
    ball.x += ball.dx;
    ball.y += ball.dy;

    // Ball collision with top and bottom walls
    if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
      ball.dy = -ball.dy;
    }

    // Check collision with player paddle
    if (
      ball.x - ball.radius < player.x + player.width &&
      ball.y > player.y &&
      ball.y < player.y + player.height
    ) {
      ball.dx = -ball.dx;
      // Add some velocity variation based on where it hits the paddle
      let collidePoint = ball.y - (player.y + player.height / 2);
      collidePoint = collidePoint / (player.height / 2);
      let angleRad = (Math.PI / 4) * collidePoint;
      ball.dy = ball.speed * Math.sin(angleRad);
      ball.dx = ball.speed * Math.cos(angleRad);
    }

    // Check collision with AI paddle
    if (
      ball.x + ball.radius > ai.x &&
      ball.y > ai.y &&
      ball.y < ai.y + ai.height
    ) {
      ball.dx = -ball.dx;
      // Add some velocity variation based on where it hits the paddle
      let collidePoint = ball.y - (ai.y + ai.height / 2);
      collidePoint = collidePoint / (ai.height / 2);
      let angleRad = (Math.PI / 4) * collidePoint;
      ball.dy = ball.speed * Math.sin(angleRad);
      ball.dx = -ball.speed * Math.cos(angleRad);
    }

    // Score update
    if (ball.x - ball.radius < 0) {
      ai.score++;
      resetBall();
    } else if (ball.x + ball.radius > canvas.width) {
      player.score++;
      resetBall();
    }
  }

  // Draw everything on canvas
  function draw() {
    // Clear canvas
    drawRect(0, 0, canvas.width, canvas.height, 'black');

    // Draw net
    for (let i = 0; i < canvas.height; i += 30) {
      drawRect(canvas.width / 2 - 1, i, 2, 20, 'white');
    }

    // Draw paddles
    drawRect(player.x, player.y, player.width, player.height, 'white');
    drawRect(ai.x, ai.y, ai.width, ai.height, 'white');

    // Draw ball
    drawCircle(ball.x, ball.y, ball.radius, 'white');

    // Draw scores
    drawText(player.score, canvas.width / 4, 50);
    drawText(ai.score, 3 * canvas.width / 4, 50);
  }

  // Game loop
  function gameLoop() {
    update();
    draw();
    requestAnimationFrame(gameLoop);
  }

  // Keyboard controls for player paddle
  document.addEventListener('keydown', function(e) {
    switch(e.key) {
      case 'ArrowUp':
        player.dy = -paddleSpeed;
        break;
      case 'ArrowDown':
        player.dy = paddleSpeed;
        break;
    }
  });

  document.addEventListener('keyup', function(e) {
    switch(e.key) {
      case 'ArrowUp':
      case 'ArrowDown':
        player.dy = 0;
        break;
    }
  });

  // Start the game loop
  gameLoop();
</script>

</body>
</html>

